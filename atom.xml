<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Lcyan's blog]]></title>
  <subtitle><![CDATA[Better Wife , Better Life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://molloc.com/"/>
  <updated>2015-05-29T04:51:32.783Z</updated>
  <id>http://molloc.com/</id>
  
  <author>
    <name><![CDATA[Lcyan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <link href="http://molloc.com/2015/05/29/hello-hexo/"/>
    <id>http://molloc.com/2015/05/29/hello-hexo/</id>
    <published>2015-05-29T04:51:32.789Z</published>
    <updated>2015-05-29T04:51:32.783Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a><br><a id="more"></a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a><br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cars]]></title>
    <link href="http://molloc.com/2015/05/29/Cars/"/>
    <id>http://molloc.com/2015/05/29/Cars/</id>
    <published>2015-05-29T04:48:11.211Z</published>
    <updated>2015-05-29T04:48:11.206Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[考试总结]]></title>
    <link href="http://molloc.com/2015/05/27/%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://molloc.com/2015/05/27/考试总结/</id>
    <published>2015-05-27T15:11:32.000Z</published>
    <updated>2015-05-29T04:53:39.403Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>项目团队将不能如期完成一个客户可交付成果,项目经理首先应该 (A)</p>
<ul>
<li><strong>A. 与团队一起审查满足期限的选择方案</strong></li>
<li>B. 将进度变更通知干系人</li>
<li>C. 启动奖励体系,以便不会错过期限</li>
<li>D. 搜索风险管理计划,确定应对这项风险的正确措施<br>解析:问题处理步骤和理念,顺序是得到实际数据-分析数据=解决问题.</li>
</ul>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>在项目施工阶段,供应商处发生火灾,导致原材料的供应延迟了一周,项目经理识别了这个延误的风险,并包含在计划当中.发生这个事件之后,项目经理首先应该(D)</p>
<ul>
<li>A. 执行风险响应计划.</li>
<li>B. 由于材料延误,要求项目延期.</li>
<li>C. 更新项目基准</li>
<li><p><strong>D. 更新风险登记册</strong></p>
<p>解析: 考点<strong>风险发生的处理步骤</strong>.题干是一个已知-未知的风险,第一步骤根据时间情况更新风险登记册.</p>
</li>
</ul>
</li>
<li><p>你是一个跨部门项目的项目经理,有四个部门就内部技术规格难以达成一致,但又必须达成一致.采取折中的办法达成的结果无法让客户满意.你下一步应该做的是(C)</p>
<ul>
<li>A. 与客户沟通,请求其接受折中的设计结果.</li>
<li>B. 请销售人员合作,就可交付成果与客户讨论</li>
<li><strong>C. 停止折中的方法,要求各部门按照客户要求的产品特征更改设计</strong></li>
<li><p>D. 在项目状态记录中报告次情况.</p>
<p>解析: 考点<strong>问题处理步骤和理念</strong>,可以利益第一为主要考点.</p>
</li>
</ul>
</li>
<li><p>当项目进去执行阶段时,项目经理了解到团队成员在没有变更范围的情况下,加班进行预期之外的工作.出现这种情况的最大可能原因是(A)</p>
<ul>
<li><strong>A. 工具分解结果不充分.</strong></li>
<li>B. 沟通管理计划不明确</li>
<li>C. 活动持续时间估算不准确</li>
<li><p>D. 资源计划差</p>
<p>解析: 考点<strong>WBS100%原则</strong>.题干<strong>没有变更范围的情况下</strong>做其他事表示范围蔓延,WBS就是把可交付成果分解成更易管理和跟踪的部分.如果做预期在外的工作,标识WBS分解不充分具有太多的灰色地带.</p>
</li>
</ul>
</li>
<li><p>项目风险已被识别,并已制订详细的响应计划,最终进度和成本估算也已完成.项目经理接下来应该(C)</p>
<ul>
<li>A. 设计一份有效的沟通计划.</li>
<li>B. 执行项目,因为所以资料都已齐备.</li>
<li><strong>C. 获得干系人对项目计划的批准.</strong></li>
<li><p>D. 建立项目关键路径.</p>
<p>解析: 考点<strong>项目管理计划批准</strong>.题干<strong>最终进度和成本估算也已完成</strong>表示项目管理计划已完成,接下需要的是获得批准,冲突答案是A,沟通管理计划属于项目管理子计划,项目管理计划完成表示沟通管理计划已完成.故排除.</p>
</li>
</ul>
</li>
<li><p>项目处于执行阶段.若要减少项目中的威胁,项目经理应该(B)</p>
<ul>
<li>A. 跟新风险管理计划.</li>
<li><strong>B. 实施行动减去项目风险</strong></li>
<li>C. 执行蒙特卡洛分析,并确定影响</li>
<li><p>D. 将风险因素报告给项目责任人,并征求决策.</p>
<p>解析: 考点<strong>风险发生的步骤和策略</strong></p>
</li>
</ul>
</li>
<li><p>以下那些过程定义了项目的总范围同时描述了在目前批准的项目范围说明离特定的工作?(A)</p>
<ul>
<li><strong>A. 工作分解结构.</strong></li>
<li>B. 材料清单.</li>
<li>C. 项目章程.</li>
<li><p>D. 需求分解结构.</p>
<p>解析: 考点<strong>WBS的作用</strong>, WBS100%和范围说明书都体现项目总范围,题干<strong>特定的工作</strong>,则需要WBS分解成更易于管理的部分.</p>
</li>
</ul>
</li>
<li><p>公司将成本确定为一个进展中的项目制约因素,可是当项目进行到一半的时候,成本投入影响到了项目的进度.若要恢复项目进度.项目经理应该使用(B)</p>
<ul>
<li>A. 关键路径法</li>
<li><strong>B. 快速跟进</strong></li>
<li>C. 赶工</li>
<li><p>D. 资源平衡</p>
<p>解析: 考点<strong>进度压缩-快速跟进</strong>,如果成本影响到进度,需用快速跟进压缩进度,如果成本节余多,就用赶工.时间不够,有三个选项,当一般是进度压缩,资源不够,有两个选项可以选,关键链法和资源平衡.</p>
</li>
</ul>
</li>
<li><p>在与项目团队成员的非正式谈话中,项目经理发现某个关键部分的供应商在执行一个以获得批准的产品变更时有问题.项目经理接下来应该执行下列那一项(A)</p>
<ul>
<li><strong>A. 实施对供应商的质量审计</strong></li>
<li>B. 安排一次变更控制会议</li>
<li>C. 衡量供应商的工作绩效</li>
<li><p>D. 与供应商的高级经理谈话</p>
<p>解析: 考点<strong>控制采购工具采购绩效审查</strong>.可通过质量工具对卖方审查,目的在于发现履约情况的好坏.</p>
</li>
</ul>
</li>
<li><p>项目团队审查了他们每月的项目质量测量指标.干系人要求新产品的投入废品率必须小于1%.若要满足这个要求,项目经理使用的方法或过程是(B)</p>
<ul>
<li>A. 统计抽样</li>
<li><strong>B. 过程分析</strong></li>
<li>C. 计划-实施-检查-行动</li>
<li>D. 标杆对照</li>
</ul>
<p>解析: 考点<strong>质量控制工具过程分析</strong>.审查他们每月的项目质量测量指标,什么跟过程有关,过程分析识别所需的改进,通过持续过程改进,可以减少浪费,消除非增值活动,使各过程在更高的效率与效果水平上运行.</p>
</li>
<li><p>项目经理发现对产品进行了多选细微的变更.虽然这些变更很细微,但他们没有在变更控制日志中被记录,也未获得客户的批准.若要确保类似的变更在项目中能得到正确的管理,项目经理应该(D)</p>
<ul>
<li>A. 确定与变更有关的成本,并向客户提供额外的工作账单</li>
<li>B. 告知客户进度已发生变更,并要求更多的资源</li>
<li>C. 在变更控制日志中记录变更,并审查潜在影响</li>
<li><strong>D. 与员工和客户审核变更控制流程</strong></li>
</ul>
<p>解析: 考点<strong>实施整体变更控制理念</strong>,如果变更会得到更好的管理,需变更控制流程</p>
</li>
<li><p>某个施工项目进入第三周,承包商发现一段地下水管道没有包含在合同范围内.他们接到客户代表的口头指令,将该水管绕出施工工地.承包商下一步应该(B)</p>
<ul>
<li>A. 按指示将水管改向</li>
<li><strong>B. 提交变更请求</strong></li>
<li>C. 分析变更的影响</li>
<li>D. 提出索赔</li>
</ul>
<p>解析: 考点<strong>实施整体变更控制步骤</strong>,变更可口头提出,当所有的变更请求需转化为书面的记录申请.</p>
</li>
<li><p>当前许多公司参与推广项目管理,通过培训可以取得很多定性和定量的结果,以下(A)是定性结果</p>
<ul>
<li><strong>A. 更高的士气(higher morale)</strong></li>
<li>B. 更高的利润率(higher profit ratio)</li>
<li>C. 工作的减少(deduction of work)</li>
<li>D. 更少的雇员(fewer staff)</li>
</ul>
<p>解析: 考点<strong>定性与定量术语</strong>,可进行客观衡量的术语定量,反之主观的衡量属于定性.</p>
</li>
<li><p>项目可交付成果交付给客户后,客户验收不满意,项目团队成员开始调查并分析原因,问这是属于以下那个过程(C)</p>
<ul>
<li>A. 质量审计</li>
<li>B. 质量改进</li>
<li><strong>C. 确认范围</strong></li>
<li>D. 绩效报告</li>
</ul>
<p>解析: 考点<strong>确认范围过程概念</strong>,与客户和发起人一同验收可交付成果.</p>
</li>
<li><p>采购经理以较高的价格购买了一种高级的设备类型.之后,项目经理得知改设备与项目合同中规定的设备类型不同,但是性能更好.项目经理接下来应该(D)</p>
<ul>
<li>A. 交付高级的设备类型,因为项目应急储备能够涵盖额外成本</li>
<li>B. 提出变更请求,获得发起人对于修改设备类型的批准</li>
<li>C. 上报发起人,因为已经超出项目经理的控制范围</li>
<li><strong>D. 使用合同中规定的设备类型替换设备</strong></li>
</ul>
<p>解析: 考点<strong>合同变更</strong>.合同具有法律性,应该严格按合同执行.</p>
</li>
<li><p>项目经理会见了一个主要的干系人.该干系人坚持认为,应在某日期完成项目,以便及时安排产品生产并参加某个贸易展览会.干系人还认为产品必须达到现行国际安全标准.只有接受这个条件,干系人才能提供项目所需启动金,项目经理将这些条件纳入下列的(C)</p>
<ul>
<li>A. 项目主要里程碑</li>
<li>B. 项目合同摘要</li>
<li><strong>C. 项目的概括性需求</strong></li>
<li>D. 项目退出标准</li>
</ul>
<p>解析: 考点<strong>项目章程的内容</strong>,题干<strong>某日期完成项目</strong>和<strong>必须达到现行国际安全标准</strong>都可以归属到概括性需求</p>
</li>
<li><p>为了限制与变更有关的风险,项目经理执行了一个审计,确保新的最小/最大限制要求能够被正确的执行.测试将会进行10次,测试结果将会用图标进行可视化分析.下列那一项质量工具将帮助项目经理判定测试是否成功(A)</p>
<ul>
<li><strong>A. 控制图</strong></li>
<li>B. 统计抽样</li>
<li>C. 帕累托图</li>
<li>D. 散点图</li>
</ul>
<p>解析: 考点<strong>质量七大工具-控制图</strong>,控制图用来确定一个过程是否稳定,或者是否具有可预测的绩效.</p>
</li>
<li><p>在项目执行阶段,项目经理意识到关键干系人未在登记册中记录.若要避免这种情况发生,在项目开始时应该采用下列哪一种技术?(B)</p>
<ul>
<li>A. 更新干系人登记册</li>
<li><strong>B. 进行干系人分析</strong></li>
<li>C. 确定干系人管理战略</li>
<li>D. 识别干系人</li>
</ul>
<p>解析: 考点<strong>识别干系人工具—干系人分析</strong></p>
</li>
<li><p>在向干系人提出项目管理计划时,项目经理注意到其中一名几乎没有组织权利的干系人表现出对项目没有兴趣.项目经理应使用(A)来管理该干系人.</p>
<ul>
<li><strong>A. 监督该干系人</strong></li>
<li>B. 密切关注该干系人</li>
<li>C. 保持让该干系人满意</li>
<li>D. 保持让该干系人获得通知</li>
</ul>
<p>解析: 考点<strong>识别干系人工具-干系人分析-权利/利益方格</strong>,对权利小,利益小的干系人可使用监督手段管理.</p>
</li>
<li><p>某项目经理目前负责一个项目,旨在推出一项新的网络服务.项目经理计划让支持团队执行此项工作.支持团队由于不具备必要的专业知识而不愿意承担工作,并声称他们从未听说过该项目,造成该问题的根本原因是(B)</p>
<ul>
<li>A. 未实施沟通管理计划</li>
<li><strong>B. 项目经理未能让所有干系人参与进来</strong></li>
<li>C. 支持团队不愿承担此工作</li>
<li>D. 项目经理为对缺乏专业知识的风险加以识别</li>
</ul>
<p>解析: 考点<strong>识别干系人过程概念</strong>.识别所有干系人.</p>
</li>
<li><p>项目经理主持一个建立数据在中心的项目.客户向项目经理提交了一份重大变更,坚称这项修改必须尽快包含在内.这涉及对预算和总体进度延迟的递增变化.项目经理接下来应该(A)</p>
<ul>
<li><strong>A. 建议客户将变更作为另一个项目启动</strong></li>
<li>B. 在下一次变更控制委员会会议上提交客户的请求</li>
<li>C. 包含客户的变更并重新制定预算和进度计划</li>
<li>D. 忽视该需求,因为有关项目的预算和进度基准已达成一致</li>
</ul>
<p>解析: 考点<strong>实施整体变更控制和理念</strong>.题干<strong>递增变化</strong>等重大变更可以建议客户启动变更,按步骤A应该在B之前,提交CCB前可限于客户讨论,在提交CCB审批.</p>
</li>
<li><p>干系人询问是否包含正确包含了最新的变更请求.若要向干系人展示这一点,项目经理应该使用(D)</p>
<ul>
<li>A. 过程分析</li>
<li>B. 帕累托图</li>
<li>C. 石川图</li>
<li><strong>D. 质量审计</strong></li>
</ul>
<p>解析: 考点<strong>质量保证工具-质量审计</strong>.质量审计还可确认已批准的变更请求(包括更新,纠正措施,缺陷补救,预防措施)的实施情况.</p>
</li>
<li><p>在一个施工项目的评审会上,一名团队成员提到一些设备运出的所在国家正在发生罢工.在核实完这个信息后,项目经理首先更新的文件是(C)</p>
<ul>
<li>A. 风险减去计划</li>
<li>B. 风险管理计划</li>
<li><strong>C. 风险登记册</strong></li>
<li>D. 风险日志</li>
</ul>
<p>解析: 考点<strong>风险发生处理步骤或策略</strong>.根据实际情况首先更新风险登记册.</p>
</li>
<li><p>在项目执行期间,团队成员通知项目经理,有一个工作包未到达质量标准,为了分析这种情况,项目经理希望与项目所有相关方开会.项目经理是在参与质量管理过程的(D)</p>
<ul>
<li>A. 监察质量</li>
<li>B. 监控项目工作</li>
<li>C. 实施质量保证</li>
<li><strong>D. 实施质量控制</strong></li>
</ul>
<p>解析: 考点<strong>质量三个过程</strong>,题干<strong>由一个工作包未到达质量保证</strong>是具体的可交付成果未达到质量标准而进行分析,属于质量控制</p>
</li>
<li><p>由于前面的项目经理管理不善,你被任命为项目B的新的项目经理.你在核对项目文件后发现,项目周期14个月中前8个月的主要资源都被更高级的项目A哪去了,无法参与项目B,第九个月开始才可能参与B项目,你做为项目经理应该(B)</p>
<ul>
<li>A. 与项目A的干系人协同,缩短资源在A的工作时间</li>
<li><strong>B. 审核项目B的情况,并与发起人商谈</strong></li>
<li>C. 前8个月继续项目,第九个月开始赶工争取按时完成B项目</li>
<li>D. 在风险登记册中记录,继续项目.</li>
</ul>
<p>解析: 考点<strong>问题步骤的处理理念</strong>.作为B项目的项目经理,需先分析B项目的情况,在申请帮助.</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>项目团队将不能如期完成一个客户可交付成果,项目经理首先应该 (A)</p>
<ul>
<li><strong>A. 与团队一起审查满足期限的选择方案</strong></li>
<li>B. 将进度变更通知干系人</li>
<li>C. 启动奖励体系,以便不会错过期限</li>
<li>D. 搜索风险管理计划,确定应对这项风险的正确措施<br>解析:问题处理步骤和理念,顺序是得到实际数据-分析数据=解决问题.</li>
</ul>
</li>
</ol>]]>
    
    </summary>
    
      <category term="pmp" scheme="http://molloc.com/tags/pmp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nginx 配置文件总结]]></title>
    <link href="http://molloc.com/2015/05/25/Nginx-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%80%BB%E7%BB%93/"/>
    <id>http://molloc.com/2015/05/25/Nginx-配置文件总结/</id>
    <published>2015-05-25T04:28:09.000Z</published>
    <updated>2015-05-28T07:43:02.084Z</updated>
    <content type="html"><![CDATA[<h2 id="顶级配置">顶级配置</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义 Nginx 运行的用户和用户组</span></span><br><span class="line"><span class="title">user</span> nginx;</span><br><span class="line"></span><br><span class="line"><span class="comment">#进程文件</span></span><br><span class="line"><span class="title">pid</span> /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#错误日志位置和级别，debug、info、notice、warn、error、crit</span></span><br><span class="line"><span class="title">error_log</span>  /var/log/nginx/error.log <span class="built_in">warn</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Nginx worker 的进程数，一般可设置为可用的CPU内核数。</span></span><br><span class="line"><span class="title">worker_processes</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#每个 worker 打开文件描述符的最大数量限制。</span></span><br><span class="line"><span class="comment">#理论值应该是最多打开文件数（系统的值ulimit -n）与 nginx 进程数相除，</span></span><br><span class="line"><span class="comment">#但是 nginx 分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span></span><br><span class="line"><span class="title">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br></pre></td></tr></table></figure>
<p>修改系统文件打开数量限制：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="built_in">ulimit</span> -HSn <span class="number">65535</span> //临时修改</span><br></pre></td></tr></table></figure>
<p>重启后永久生效，则需要设置修改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure>
<p>在文件尾部添加：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile <span class="number">200000</span></span><br><span class="line">* hard nofile <span class="number">200000</span></span><br></pre></td></tr></table></figure>
<h2 id="Events_模块">Events 模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    <span class="comment">#设置一个worker进程同时打开的最大连接数</span></span><br><span class="line">    worker_connections <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#告诉nginx收到一个新连接通知后接受尽可能多的连接</span></span><br><span class="line">    multi_accept on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置用于复用客户端线程的轮询方法。如果你使用Linux 2.6+，你应该使用epoll。</span></span><br><span class="line">    <span class="comment">#如果你使用*BSD，你应该使用kqueue。</span></span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HTTP_模块">HTTP 模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment">#隐藏 Nginx 的版本号，提高安全性。</span></span><br><span class="line">    server_tokens off;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启高效文件传输模式，sendfile 指令指定 Nginx 是否调用sendfile 函数来输出文件，</span></span><br><span class="line">    <span class="comment">#对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，</span></span><br><span class="line">    <span class="comment">#以平衡磁盘与网络 I/O 处理速度，降低系统的负载。</span></span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#是否开启目录列表访问，默认关闭。</span></span><br><span class="line">    autoindex off;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#告诉 Nginx 在一个数据包里发送所有头文件，而不一个接一个的发送</span></span><br><span class="line">    tcp_nopush on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#告诉 Nginx 不要缓存数据，而是一段一段的发送--当需要及时发送数据时，</span></span><br><span class="line">    <span class="comment">#就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。</span></span><br><span class="line">    <span class="comment">#Nginx 默认会始终工作在 tcp nopush 状态下。但是当开启前面的 sendfile on; 时，</span></span><br><span class="line">    <span class="comment">#它的工作特点是 nopush 的最后一个包会自动转转换到 nopush off。为了减小那200ms的延迟，</span></span><br><span class="line">    <span class="comment">#开启 nodelay on; 将其很快传送出去。结论就是 sendfile on; 开启时，tcp_nopush 和 tcp_nodelay 都是on 是可以的。</span></span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#日志格式设定</span></span><br><span class="line">    <span class="built_in">log</span>_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    <span class="comment">#定义访问日志，设置为 off 可以关闭日志，提高性能</span></span><br><span class="line">    access_<span class="built_in">log</span> /var/<span class="built_in">log</span>/nginx/access.log main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#连接超时时间，单位是秒</span></span><br><span class="line">    keepalive_timeout <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取HTTP头部的超时时间，默认值 60。</span></span><br><span class="line">    <span class="comment">#客户端与服务器建立连接后将开始接收HTTP头部，在这个过程中，</span></span><br><span class="line">    <span class="comment">#如果在一个时间间隔（超时时间）内没有读取到客户端发来的字节，</span></span><br><span class="line">    <span class="comment">#则认为超时，并向客户端返回408 ("Request timed out")响应。</span></span><br><span class="line">    client_header_timeout <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默认值 60。与client_header_timeout相似，只是这个超时时间只在读取HTTP包体时才有效。</span></span><br><span class="line">    client_body_timeout <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#发送响应的超时时间，默认值 60。即Nginx服务器向客户端发送了数据包，</span></span><br><span class="line">    <span class="comment">#但客户端一直没有去接收这个数据包。如果某个连接超过send_timeout定义的超时时间，那么Nginx将会关闭这个连接。</span></span><br><span class="line">    send_timeout <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#连接超时后将通过向客户端发送RST包来直接重置连接。这个选项打开后，</span></span><br><span class="line">    <span class="comment">#Nginx会在某个连接超时后，不是使用正常情形下的四次握手关闭TCP连接，</span></span><br><span class="line">    <span class="comment">#而是直接向用户发送RST重置包，不再等待用户的应答，</span></span><br><span class="line">    <span class="comment">#直接释放Nginx服务器上关于这个套接字使用的所有缓存（如TCP滑动窗口）。</span></span><br><span class="line">    <span class="comment">#相比正常的关闭方式，它使得服务器避免产生许多处于FIN_WAIT_1、FIN_WAIT_2、TIME_WAIT状态的TCP连接。</span></span><br><span class="line">    <span class="comment">#注意，使用RST重置包关闭连接会带来一些问题，默认情况下不会开启。</span></span><br><span class="line">    reset_timedout_connection off;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#要限制连接，必须先有一个容器对连接进行计数，"zone=" 是给它一个名字，</span></span><br><span class="line">    <span class="comment">#可以随便叫，这个名字要跟下面的 limit_conn 一致。$binary_remote_addr </span></span><br><span class="line">    <span class="comment">#用二进制来储存客户端的地址，1m 可以储存 32000 个并发会话。</span></span><br><span class="line">    <span class="built_in">limit</span>_conn_zone <span class="variable">$binary_remote_addr</span> zone=addr:<span class="number">5</span>m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#给定的key设置最大连接数。这里key是addr，我们设置的值是100，</span></span><br><span class="line">    <span class="comment">#也就是说我们允许每一个IP地址最多同时打开有100个连接。</span></span><br><span class="line">    <span class="built_in">limit</span>_conn addr <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#对每个连接限速100k。这如果一个IP允许两个并发连接，那么这个IP就是限速200K。</span></span><br><span class="line">    <span class="built_in">limit</span>_rate <span class="number">100</span>k; </span><br><span class="line"></span><br><span class="line">    <span class="comment">#include 是一个在当前文件中包含另一个文件内容的指令。</span></span><br><span class="line">    <span class="comment">#这里我们使用它来加载文件扩展名与文件类型映射表。nginx根据映射关系，</span></span><br><span class="line">    <span class="comment">#设置http请求响应头的Content-Type值。当在映射表找不到时，</span></span><br><span class="line">    <span class="comment">#使用nginx.conf中default-type指定的默认值。</span></span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置文件使用的默认的MIME-type</span></span><br><span class="line">    default_<span class="built_in">type</span> text/html;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默认编码</span></span><br><span class="line">    charset UTF-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#该模块可以读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗。</span></span><br><span class="line">    <span class="comment">#该模块启用后，nginx首先检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容。</span></span><br><span class="line">    gzip_static off;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启 gzip 压缩。</span></span><br><span class="line">    gzip on;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 禁用客户端为 IE6 时的 gzip功能。</span></span><br><span class="line">    gzip_<span class="built_in">disable</span> <span class="string">"msie6"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Nginx做为反向代理的时候启用。</span></span><br><span class="line">    <span class="comment">#可选值：off|expired|no-cache|no-sotre|private|no_last_modified|no_etag|auth|any</span></span><br><span class="line">    gzip_proxied any;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。</span></span><br><span class="line">    <span class="comment">#建议设置成大于1k的字节数，小于1k可能会越压越大。</span></span><br><span class="line">    gzip_min_length <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置数据的压缩等级。这个等级可以是1-9之间的任意数值，9是最慢但是压缩比最大的。</span></span><br><span class="line">    gzip_comp_level <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。 </span></span><br><span class="line">    <span class="comment">#例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。</span></span><br><span class="line">    <span class="comment">#如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。</span></span><br><span class="line">    gzip_buffers <span class="number">4</span> <span class="number">16</span>k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置需要压缩的数据格式。Nginx默认只对text/html进行压缩。</span></span><br><span class="line">    gzip_types text/plain text/css application/json application/x-javascript \</span><br><span class="line">               text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，</span></span><br><span class="line">    <span class="comment">#建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line">    open_file_cache max=<span class="number">65535</span> inactive=<span class="number">30</span>s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#多长时间检查一次缓存的有效信息</span></span><br><span class="line">    open_file_cache_valid <span class="number">30</span>s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，</span></span><br><span class="line">    <span class="comment">#如果超过这个数字，文件描述符一直是在缓存中打开的。</span></span><br><span class="line">    <span class="comment">#出现 Last-Modified 不变的情况，就是因为当nginx对一个静态文件缓存后，</span></span><br><span class="line">    <span class="comment">#如果30s内还在访问它，那么它的缓存就一直存在，直到30s内你不访问了为止。</span></span><br><span class="line">    open_file_cache_min_uses <span class="number">2</span>;</span><br><span class="line">    <span class="comment">#是否记录cache错误</span></span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SERVER_模块">SERVER 模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="comment">#监听端口，nginx 会根据请求的 HOST 来决定使用哪个 SERVER 段的配置。</span></span><br><span class="line">    <span class="comment">#如果没有匹配的 server_name，则默认使用配置文件中第一个。</span></span><br><span class="line">    <span class="comment">#加上 default_server 则可以以指定没有匹配时的默认规则。</span></span><br><span class="line">    <span class="comment">#listen 80;</span></span><br><span class="line">    listen <span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">    server_name www.test.com test.com;</span><br><span class="line">    root /user/share/nginx/html/<span class="built_in">test</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#404页面配置</span></span><br><span class="line">    error_page   <span class="number">404</span>   /<span class="number">404</span>.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置 ssl，有需要时开启。</span></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index   index.html index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#图片缓存时间设置</span></span><br><span class="line">    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">        expires <span class="number">10</span>d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#JS和CSS缓存时间设置</span></span><br><span class="line">    location ~ .*.(js|css)?$ &#123;</span><br><span class="line">        expires <span class="number">1</span>h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">        fastcgi_index   index.php;</span><br><span class="line">        <span class="comment">#开启 PATH_INFO 支持，作用就是把参数按照给定的正则表达式分割成 $fastcgi_script_name 和 $fastcgi_path_info。</span></span><br><span class="line">        <span class="comment">#例如：请求 index.php/id/1 不加此行配置时，fastcgi_script_name 是 /index.php/id/1，fastcgi_path_info 是空。</span></span><br><span class="line">        <span class="comment">#加上之后，fastcgi_script_name 是 index.php，fastcgi_path_info 是 /id/1</span></span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(.*)$;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#此值即是 PHP 中 $_SERVER['SCRIPT_FILENAME'] 的值</span></span><br><span class="line">        fastcgi_param   SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        fastcgi_param   PATH_INFO               <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        fastcgi_param   PATH_TRANSLATED <span class="variable">$document_root</span><span class="variable">$fastcgi_path_info</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#指定FastCGI服务器监听端口与地址。须和 PHP-FPM 的设置相同。</span></span><br><span class="line">        <span class="comment">#fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        fastcgi_pass    unix:/var/run/php5-fpm.sock;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><ol>
<li><a href="http://nginx.org/en/docs/" target="_blank" rel="external">nginx document</a></li>
<li><a href="http://www.oschina.net/translate/nginx-setup" target="_blank" rel="external">nginx setup</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="顶级配置">顶级配置</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义 Nginx 运行的用户和用户组</span></span><br><span class="line"><span class="title">user</span> nginx;</span><br><span class="line"></span><br><span class="line"><span class="comment">#进程文件</span></span><br><span class="line"><span class="title">pid</span> /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#错误日志位置和级别，debug、info、notice、warn、error、crit</span></span><br><span class="line"><span class="title">error_log</span>  /var/log/nginx/error.log <span class="built_in">warn</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Nginx worker 的进程数，一般可设置为可用的CPU内核数。</span></span><br><span class="line"><span class="title">worker_processes</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#每个 worker 打开文件描述符的最大数量限制。</span></span><br><span class="line"><span class="comment">#理论值应该是最多打开文件数（系统的值ulimit -n）与 nginx 进程数相除，</span></span><br><span class="line"><span class="comment">#但是 nginx 分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span></span><br><span class="line"><span class="title">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br></pre></td></tr></table></figure>
<p>修改系统文件打开数量限制：</p>]]>
    
    </summary>
    
      <category term="linux" scheme="http://molloc.com/tags/linux/"/>
    
      <category term="nginx" scheme="http://molloc.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git push与pull的默认行为]]></title>
    <link href="http://molloc.com/2015/05/22/Git-push%E4%B8%8Epull%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/"/>
    <id>http://molloc.com/2015/05/22/Git-push与pull的默认行为/</id>
    <published>2015-05-22T04:20:18.000Z</published>
    <updated>2015-05-29T04:41:48.089Z</updated>
    <content type="html"><![CDATA[<h2 id="git_push">git push</h2><p>通常对于一个本地的新建分支，例如<code>git checkout -b develop</code>, 在<code>develop</code>分支<code>commit</code>了代码之后，如果直接执行<code>git push</code>命令，<code>develop</code>分支将不会被<code>push</code>到远程仓库（但此时<code>git push</code>操作有可能会推送一些代码到远程仓库，这取决于我们本地<code>git config</code>配置中的<code>push.default</code>默认行为，下文将会逐一详解）。  </p>
<p>因此我们至少需要显式指定将要推送的分支名，例如<code>git push origin develop</code>，才能将本地新分支推送到远程仓库。  </p>
<p>当我们通过显式指定分支名进行初次<code>push</code>操作后，本地有了新的<code>commit</code>，此时执行<code>git push</code>命令会有什么效果呢？  </p>
<a id="more"></a>
<p>如果你未曾改动过<code>git config</code>中的<code>push.default</code>属性，根据我们使用的git不同版本（Git 2.0之前或之后），<br><code>git push</code>通常会有两种截然不同的行为:</p>
<ol>
<li>develop分支中本地新增的commit被push到远程仓库</li>
<li>push失败，并收到git如下的警告</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fatal: The current branch new has no upstream branch.</span><br><span class="line">To push the current branch and <span class="built_in">set</span> the remote as upstream, use</span><br><span class="line">    git push --set-upstream origin develop</span><br></pre></td></tr></table></figure>
<p>为什么git版本不同会有两种不同的push行为？</p>
<p>因为在git的全局配置中，有一个push.default属性，其决定了git push操作的默认行为。在Git 2.0之前，这个属性的默认被设为’matching’，2.0之后则被更改为了’simple’。</p>
<p>我们可以通过<code>git version</code>确定当前的git版本（如果小于2.0，更新是个更好的选择），通过<code>git config --global push.default</code> ‘option’改变push.default的默认行为（或者也可直接编辑~/.gitconfig文件）。</p>
<h3 id="push-default_有以下几个可选值：">push.default 有以下几个可选值：</h3><p>nothing, current, upstream, simple, matching</p>
<p>其用途分别为：</p>
<ul>
<li><code>nothing</code>  push操作无效，除非显式指定远程分支，例如git push origin develop（我觉得。。。可以给那些不愿学git的同事配上此项）。</li>
<li><code>current</code>  push当前分支到远程同名分支，如果远程同名分支不存在则自动创建同名分支。</li>
<li><code>upstream</code> push当前分支到它的upstream分支上（这一项其实用于经常从本地分支push/pull到同一远程仓库的情景，这种模式叫做central workflow）。</li>
<li><code>simple</code>   simple和upstream是相似的，只有一点不同，simple必须保证本地分支和它的远程upstream分支同名，否则会拒绝push操作。</li>
<li><code>matching</code> push所有本地和远程两端都存在的同名分支.  </li>
</ul>
<p>因此如果我们使用了git2.0之前的版本，<code>push.default = matching</code>，<code>git push</code>后则会推送当前分支代码到远程分支，而2.0之后，<code>push.default = simple</code>，如果没有指定当前分支的upstream分支，就会收到上文的fatal提示。</p>
<h2 id="upstream_&amp;_downstream">upstream &amp; downstream</h2><p>说到这里，需要解释一下git中的upstream到底是什么：</p>
<blockquote>
<p>git中存在upstream和downstream，简言之，当我们把仓库A中某分支x的代码push到仓库B分支y，此时仓库B的这个分支y就叫做A中x分支的upstream，而x则被称作y的downstream，这是一个相对关系，每一个本地分支都相对地可以有一个远程的upstream分支（注意这个upstream分支可以不同名，但通常我们都会使用同名分支作为upstream）。</p>
</blockquote>
<p>初次提交本地分支，例如git push origin develop操作，并不会定义当前本地分支的upstream分支，我们可以通过git push —set-upstream origin develop，关联本地develop分支的upstream分支，另一个更为简洁的方式是初次push时，加入-u参数，例如git push -u origin develop，这个操作在push的同时会指定当前分支的upstream。</p>
<p>注意<code>push.default = current</code>可以在远程同名分支不存在的情况下自动创建同名分支，有些时候这也是个极其方便的模式，比如初次push你可以直接输入 <code>git push</code> 而不必显示指定远程分支。</p>
<h2 id="git_pull">git pull</h2><p>弄清楚<code>git push</code>的默认行为后，再来看看<code>git pull</code>。</p>
<p>当我们未指定当前分支的upstream时，通常<code>git pull</code>操作会得到如下的提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">There is no tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">Please specify <span class="built_in">which</span> branch you want to merge with.</span><br><span class="line">See git-pull(<span class="number">1</span>) <span class="keyword">for</span> details</span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line">If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:</span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; new1</span><br></pre></td></tr></table></figure></p>
<p><code>git pull</code>的默认行为和git push完全不同。当我们执行git pull的时候，实际上是做了<code>git fetch + git merge</code>操作，fetch操作将会更新本地仓库的remote tracking，也就是refs/remotes中的代码，并不会对refs/heads中本地当前的代码造成影响。</p>
<p>当我们进行pull的第二个行为merge时，对git来说，如果我们没有设定当前分支的upstream，它并不知道我们要合并哪个分支到当前分支，所以我们需要通过下面的代码指定当前分支的upstream：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/&lt;branch&gt; develop</span><br><span class="line">// 或者git push --set-upstream origin develop</span><br></pre></td></tr></table></figure>
<p>实际上，如果我们没有指定upstream，git在merge时会访问git config中当前分支(develop)merge的默认配置，我们可以通过配置下面的内容指定某个分支的默认merge操作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[branch <span class="string">"develop"</span>]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/develop //[<span class="number">1</span>] 为什么不是refs/remotes/develop?</span><br><span class="line"></span><br><span class="line">或者通过<span class="built_in">command</span>-line直接设置：</span><br><span class="line"></span><br><span class="line">git config branch.develop.merge refs/heads/develop</span><br></pre></td></tr></table></figure>
<p>这样当我们在develop分支git pull时，如果没有指定upstream分支，git将根据我们的config文件去merge origin/develop；如果指定了upstream分支，则会忽略config中的merge默认配置。</p>
<p>以上就是git push和git pull操作的全部默认行为，如有错误，欢迎斧正</p>
<p>[1]: 为什么merge = refs/heads/develop 而不是refs/remotes/develop?</p>
<p>因为这里merge指代的是我们想要merge的远程分支，是remote上的refs/heads/develop，文中即是origin上的refs/heads/develop，这和我们在本地直接执行<code>git merge</code>是不同的(本地执行<code>git merge origin/develop</code>则是直接merge refs/remotes/develop)。</p>
<h2 id="refs:">refs:</h2><ul>
<li><a href="http://git-scm.com/book/en/v2/Git-Internals-The-Refspec" target="_blank" rel="external">http://git-scm.com/book/en/v2/Git-Internals-The-Refspec</a></li>
<li><a href="http://stackoverflow.com/questions/658885/how-do-you-get-git-to-always-pull-from-a-specific-branch" target="_blank" rel="external">http://stackoverflow.com/questions/658885/how-do-you-get-git-to-always-pull-from-a-specific-branch</a></li>
<li><a href="http://stackoverflow.com/questions/17096311/why-do-i-need-to-explicitly-push-a-new-branch" target="_blank" rel="external">http://stackoverflow.com/questions/17096311/why-do-i-need-to-explicitly-push-a-new-branch</a></li>
<li><a href="http://www.gitguys.com/topics/the-configuration-file-branch-section/" target="_blank" rel="external">http://www.gitguys.com/topics/the-configuration-file-branch-section/</a></li>
</ul>
<p>原文地址: <a href="http://segmentfault.com/a/1190000002783245?utm_source=tuicool" target="_blank" rel="external">http://segmentfault.com/a/1190000002783245?utm_source=tuicool</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="git_push">git push</h2><p>通常对于一个本地的新建分支，例如<code>git checkout -b develop</code>, 在<code>develop</code>分支<code>commit</code>了代码之后，如果直接执行<code>git push</code>命令，<code>develop</code>分支将不会被<code>push</code>到远程仓库（但此时<code>git push</code>操作有可能会推送一些代码到远程仓库，这取决于我们本地<code>git config</code>配置中的<code>push.default</code>默认行为，下文将会逐一详解）。  </p>
<p>因此我们至少需要显式指定将要推送的分支名，例如<code>git push origin develop</code>，才能将本地新分支推送到远程仓库。  </p>
<p>当我们通过显式指定分支名进行初次<code>push</code>操作后，本地有了新的<code>commit</code>，此时执行<code>git push</code>命令会有什么效果呢？  </p>]]>
    
    </summary>
    
      <category term="git" scheme="http://molloc.com/tags/git/"/>
    
      <category term="pull" scheme="http://molloc.com/tags/pull/"/>
    
      <category term="push" scheme="http://molloc.com/tags/push/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[高效Linux bash快捷键及alias总结]]></title>
    <link href="http://molloc.com/2015/05/15/%E9%AB%98%E6%95%88Linux-bash%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8Aalias%E6%80%BB%E7%BB%93/"/>
    <id>http://molloc.com/2015/05/15/高效Linux-bash快捷键及alias总结/</id>
    <published>2015-05-15T14:33:57.000Z</published>
    <updated>2015-05-29T03:17:53.090Z</updated>
    <content type="html"><![CDATA[<p>习惯使用编辑的快捷键可以大大提高效率，记忆学习过程要有意识的忽略功能键、方向键和数字小键盘。以下快捷键适用在bash处于默认的Emacs模式下。如果你有 set -o vi ，就处于  vi 模式就不适用了。另外下面的内容并不包含所有快捷键，只是我个人适用频率最高的几种，但相信已经可以大大提高工作效率了：</p>
<h2 id="bash_shortcut">bash shortcut</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + l   <span class="comment"># 清除屏幕，同clear</span></span><br><span class="line">Ctrl + a   <span class="comment"># 将光标定位到命令的开头</span></span><br><span class="line">Ctrl + e   <span class="comment"># 与上一个快捷键相反，将光标定位到命令的结尾</span></span><br><span class="line">Ctrl + u   <span class="comment"># 剪切光标之前的内容，在输错命令或密码</span></span><br><span class="line">Ctrl + k   <span class="comment"># 与上一个快捷键相反，剪切光标之后的内容</span></span><br><span class="line">Ctrl + y   <span class="comment"># 粘贴以上两个快捷键所剪切的内容。Alt+y粘贴更早的内容</span></span><br><span class="line">Ctrl + w   <span class="comment"># 删除光标左边的参数（选项）或内容（实际是以空格为单位向前剪切一个word）</span></span><br><span class="line">Ctrl + /   <span class="comment"># 撤销，同Ctrl+x u</span></span><br><span class="line">Ctrl + f   <span class="comment"># 按字符前移（右向），同→</span></span><br><span class="line">Ctrl + b   <span class="comment"># 按字符后移（左向），同←</span></span><br><span class="line">Alt  + f   <span class="comment"># 单词前移，标点等特殊字符与空格一样分隔单词（右向），同Ctrl+→</span></span><br><span class="line">Alt  + b   <span class="comment"># 单词后移（左向），同Ctrl+←</span></span><br><span class="line">Alt  + d   <span class="comment"># 光标处删除至字尾。可以Ctrl+y粘贴回来</span></span><br><span class="line">Alt  + \   <span class="comment"># 除当前光标前面所有的空白字符</span></span><br><span class="line">Ctrl + d   <span class="comment"># 删除光标处的字符，同Del键。没有命令是表示注销用户</span></span><br><span class="line">Ctrl + h   <span class="comment"># 删除光标前的字符</span></span><br><span class="line">Ctrl + r   <span class="comment"># 逆向搜索命令历史，比history好用</span></span><br><span class="line">Ctrl + g   <span class="comment"># 从历史搜索模式退出，同ESC</span></span><br><span class="line">Ctrl + p   <span class="comment"># 历史中的上一条命令，同↑</span></span><br><span class="line">Ctrl + n   <span class="comment"># 历史中的下一条命令，同↓</span></span><br><span class="line">Alt  + .   <span class="comment"># 同!$，输出上一个命令的最后一个参数（选项or单词）。</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="常用alias">常用alias</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> wl=<span class="string">'ll | wc -l'</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">'ls -l'</span></span><br><span class="line"><span class="built_in">alias</span> lh=<span class="string">'ls -lh'</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">'grep -i --color'</span> <span class="comment">#用颜色标识，更醒目；忽略大小写</span></span><br><span class="line"><span class="built_in">alias</span> vi=vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入目录并列出文件</span></span><br><span class="line"><span class="function"><span class="title">cdl</span></span>() &#123; <span class="built_in">cd</span> <span class="string">"<span class="variable">$@</span>"</span> &amp;&amp; <span class="built_in">pwd</span> ; ls -al; &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">"cdl .."</span></span><br><span class="line"><span class="built_in">alias</span> ...=<span class="string">"cd ../.."</span>   <span class="comment"># 快速进入上上层目录</span></span><br><span class="line"><span class="built_in">alias</span> .<span class="number">3</span>=<span class="string">"cd ../../.."</span></span><br><span class="line"><span class="built_in">alias</span> cd..=<span class="string">'cdl ..'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alias cp="cp -iv"      # interactive, verbose</span></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">"rm -i"</span>      <span class="comment"># interactive</span></span><br><span class="line"><span class="comment"># alias mv="mv -iv"       # interactive, verbose</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> psg=<span class="string">'ps aux | grep -v grep | grep -i --color'</span> <span class="comment"># 查看进程信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> hg=<span class="string">'history|grep'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> c=<span class="string">'clear'</span>  <span class="comment"># 快速清屏</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> netp=<span class="string">'netstat -tulanp'</span>  <span class="comment"># 查看服务器端口连接信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> lvim=<span class="string">"vim -c \"normal '0\""</span>  <span class="comment"># 编辑vim最近打开的文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> tf=<span class="string">'tail -f '</span>  <span class="comment"># 快速查看文件末尾输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动在文件末尾加上 .bak-日期 来备份文件，如 bu nginx.conf</span></span><br><span class="line"><span class="function"><span class="title">bak</span></span>() &#123; cp <span class="string">"<span class="variable">$@</span>"</span> <span class="string">"<span class="variable">$@</span>.bak"</span>-`date +%y%m%d`; <span class="built_in">echo</span> <span class="string">"`date +%Y-%m-%d` backed up <span class="variable">$PWD</span>/<span class="variable">$@</span>"</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 级联创建目录并进入，如 mcd a/b/c</span></span><br><span class="line"><span class="function"><span class="title">mcd</span></span>() &#123; mkdir -p <span class="variable">$1</span> &amp;&amp; <span class="built_in">cd</span> <span class="variable">$1</span> &amp;&amp; <span class="built_in">pwd</span> ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看去掉#注释和空行的配置文件，如 nocomm /etc/squid/squid.conf</span></span><br><span class="line"><span class="built_in">alias</span> nocomm=<span class="string">'grep -Ev '</span>\<span class="string">''</span>^(<span class="comment">#|$)'\'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速根据进程号pid杀死进程，如 psid tomcat， 然后 kill9 两个tab键提示要kill的进程号</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">kill</span>9=<span class="string">'kill -9'</span>;</span><br><span class="line"><span class="function"><span class="title">psid</span></span>() &#123;</span><br><span class="line">  [[ ! -n <span class="variable">$&#123;1&#125;</span> ]] &amp;&amp; <span class="built_in">return</span>;   <span class="comment"># bail if no argument</span></span><br><span class="line">  pro=<span class="string">"[<span class="variable">$&#123;1:0:1&#125;</span>]<span class="variable">$&#123;1:1&#125;</span>"</span>;      <span class="comment"># process-name –&gt; [p]rocess-name (makes grep better)</span></span><br><span class="line">  ps axo pid,user,<span class="built_in">command</span> | grep -v grep |grep -i --color <span class="variable">$&#123;pro&#125;</span>;   <span class="comment"># show matching processes</span></span><br><span class="line">  pids=<span class="string">"<span class="variable">$(ps axo pid,user,command | grep -v grep | grep -i $&#123;pro&#125; | awk '&#123;print $1&#125;')</span>"</span>;   <span class="comment"># get pids</span></span><br><span class="line">  complete -W <span class="string">"<span class="variable">$&#123;pids&#125;</span>"</span> <span class="built_in">kill</span>9     <span class="comment"># make a completion list for kk</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压所有归档文件工具</span></span><br><span class="line"><span class="keyword">function</span> extract &#123;</span><br><span class="line"> <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># display usage if no parameters given</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: extract &lt;path/file_name&gt;.&lt;zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz&gt;"</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="operator">-f</span> <span class="variable">$1</span> ] ; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># NAME=$&#123;1%.*&#125;</span></span><br><span class="line">        <span class="comment"># mkdir $NAME &amp;&amp; cd $NAME</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">          *.tar.bz2)   tar xvjf <span class="variable">$1</span>    ;;</span><br><span class="line">          *.tar.gz)    tar xvzf <span class="variable">$1</span>    ;;</span><br><span class="line">          *.tar.xz)    tar xvJf <span class="variable">$1</span>    ;;</span><br><span class="line">          *.lzma)      unlzma <span class="variable">$1</span>      ;;</span><br><span class="line">          *.bz2)       bunzip2 <span class="variable">$1</span>     ;;</span><br><span class="line">          *.rar)       unrar x -ad <span class="variable">$1</span> ;;</span><br><span class="line">          *.gz)        gunzip <span class="variable">$1</span>      ;;</span><br><span class="line">          *.tar)       tar xvf <span class="variable">$1</span>     ;;</span><br><span class="line">          *.tbz2)      tar xvjf <span class="variable">$1</span>    ;;</span><br><span class="line">          *.tgz)       tar xvzf <span class="variable">$1</span>    ;;</span><br><span class="line">          *.zip)       unzip <span class="variable">$1</span>       ;;</span><br><span class="line">          *.Z)         uncompress <span class="variable">$1</span>  ;;</span><br><span class="line">          *.<span class="number">7</span>z)        <span class="number">7</span>z x <span class="variable">$1</span>        ;;</span><br><span class="line">          *.xz)        unxz <span class="variable">$1</span>        ;;</span><br><span class="line">          *.exe)       cabextract <span class="variable">$1</span>  ;;</span><br><span class="line">          *)           <span class="built_in">echo</span> <span class="string">"extract: '<span class="variable">$1</span>' - unknown archive method"</span> ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> - file does not exist"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>习惯使用编辑的快捷键可以大大提高效率，记忆学习过程要有意识的忽略功能键、方向键和数字小键盘。以下快捷键适用在bash处于默认的Emacs模式下。如果你有 set -o vi ，就处于  vi 模式就不适用了。另外下面的内容并不包含所有快捷键，只是我个人适用频率最高的几种，但相信已经可以大大提高工作效率了：</p>
<h2 id="bash_shortcut">bash shortcut</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + l   <span class="comment"># 清除屏幕，同clear</span></span><br><span class="line">Ctrl + a   <span class="comment"># 将光标定位到命令的开头</span></span><br><span class="line">Ctrl + e   <span class="comment"># 与上一个快捷键相反，将光标定位到命令的结尾</span></span><br><span class="line">Ctrl + u   <span class="comment"># 剪切光标之前的内容，在输错命令或密码</span></span><br><span class="line">Ctrl + k   <span class="comment"># 与上一个快捷键相反，剪切光标之后的内容</span></span><br><span class="line">Ctrl + y   <span class="comment"># 粘贴以上两个快捷键所剪切的内容。Alt+y粘贴更早的内容</span></span><br><span class="line">Ctrl + w   <span class="comment"># 删除光标左边的参数（选项）或内容（实际是以空格为单位向前剪切一个word）</span></span><br><span class="line">Ctrl + /   <span class="comment"># 撤销，同Ctrl+x u</span></span><br><span class="line">Ctrl + f   <span class="comment"># 按字符前移（右向），同→</span></span><br><span class="line">Ctrl + b   <span class="comment"># 按字符后移（左向），同←</span></span><br><span class="line">Alt  + f   <span class="comment"># 单词前移，标点等特殊字符与空格一样分隔单词（右向），同Ctrl+→</span></span><br><span class="line">Alt  + b   <span class="comment"># 单词后移（左向），同Ctrl+←</span></span><br><span class="line">Alt  + d   <span class="comment"># 光标处删除至字尾。可以Ctrl+y粘贴回来</span></span><br><span class="line">Alt  + \   <span class="comment"># 除当前光标前面所有的空白字符</span></span><br><span class="line">Ctrl + d   <span class="comment"># 删除光标处的字符，同Del键。没有命令是表示注销用户</span></span><br><span class="line">Ctrl + h   <span class="comment"># 删除光标前的字符</span></span><br><span class="line">Ctrl + r   <span class="comment"># 逆向搜索命令历史，比history好用</span></span><br><span class="line">Ctrl + g   <span class="comment"># 从历史搜索模式退出，同ESC</span></span><br><span class="line">Ctrl + p   <span class="comment"># 历史中的上一条命令，同↑</span></span><br><span class="line">Ctrl + n   <span class="comment"># 历史中的下一条命令，同↓</span></span><br><span class="line">Alt  + .   <span class="comment"># 同!$，输出上一个命令的最后一个参数（选项or单词）。</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="alias" scheme="http://molloc.com/tags/alias/"/>
    
      <category term="bash" scheme="http://molloc.com/tags/bash/"/>
    
      <category term="linux" scheme="http://molloc.com/tags/linux/"/>
    
  </entry>
  
</feed>